---
description: 
globs: 
alwaysApply: false
---
---
description: コードを書く上で考慮すべきこと
globs: 
alwaysApply: true
---
コード生成や修正を行う際、以下の原則・手法を必ず考慮してください。

「理解しやすさ」を最優先に
　– 書かれるコードは、他の開発者が最小限の労力で意図を把握できるようにすること。
　– 将来のメンテナンスを考慮し、読み手の「理解にかかる時間」を短縮する工夫を行う。

命名規則の徹底
　– 各変数、関数、クラスには具体的で意味のある名前を付け、可能な限り情報（用途、単位、役割）を含める。
　– 一般的な略語や曖昧な名前は避け、チーム内で共有された命名規則に従うこと。

効果的なコメントの記述
　– コードの「何をしているか」ではなく、「なぜそうするのか」「どのような背景や意図があるのか」を明記する。
　– 重要な処理、エッジケース、パフォーマンス上の注意点、またはセキュリティに関する留意点をコメントで記述する。
　– コメントは短く、具体的に、かつ情報量が高いものにする。
　– 他の開発者にも伝えるべきコメントのみを記載する。個々の修正のたびにその時の修正内容のコメントを追加しないこと。

整然としたコードのフォーマッティング
　– 一貫性のあるインデント、空白、改行を用いてコードの「見た目」を整える。
　– 論理的に関連するコードはグループ化し、適宜空行で区切る。
　– 複数の同種処理（例：変数宣言、引数リスト）は列揃えなどで視認性を高める。

シンプルな制御フローの実現
　– 条件分岐やループは、読み手が直感的に理解できる順序で記述する（例：「if (条件)」の中身がポジティブなケースになるようにする）。
　– 不要なネストは避け、ガード節や早期リターンを利用して、コードの流れを直線的にする。
　– 複雑な条件式は、適切な中間変数を用いて分割し、各部分の意味を明確にする。

巨大な式や複雑なロジックの分解
　– 複雑な計算や条件式は、途中の部分式を変数に抽出して、コードの意図を読みやすくする。
　– 論理式の再構築（例えば、De Morgan の法則の適用）により、読みやすくする工夫を行う。

変数管理とスコープの最適化
　– 不要な一時変数や中間結果を排除し、コードを簡潔に保つ。
　– 変数のスコープを限定し、変数の値の追跡を容易にする。
　– 制御フローのためだけに使用される変数は、可能であれば構造自体を改善して排除する。

テストコードや例も重視する
　– コードの動作を示す具体的な例や、エッジケースに対するテストを充実させ、生成したコードの意図を裏付ける。
　– コードとテストはともに読みやすく、保守しやすい形にする。

Cursor機能のコントロール
  - .envなど重要なファイルを許可なしに削除しないこと
  - コミットやプッシュは許可をとってから行うこと
  - ReactやNext.jsのバージョンを許可なしに変更しないこと




