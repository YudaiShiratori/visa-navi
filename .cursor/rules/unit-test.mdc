---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: *.ts, *.tsx
alwaysApply: true
---
# Unit Testing Guidelines

## テストについて
Vitestによりユニットテストが実行される。

## テストファイルの配置
- テストファイルは `__tests__` ディレクトリ以下に、ソースコードと同じディレクトリ構造で配置する
- テストファイルの命名規則は `{テスト対象ファイル名}.test.{ts|tsx}` とする
  例: `Button.tsx` → `Button.test.tsx`

## テストカバレッジ対象
以下のディレクトリのソースコードに対してテストを作成する：
- `app/**` - Next.js App Router
- `components/**` - 再利用可能なコンポーネント
- `lib/**` - ユーティリティ関数とヘルパー
- `hooks/**` - カスタムフック
- `utils/**` - 汎用ユーティリティ関数

## ベストプラクティス
1. **テストの独立性**
   - 各テストは他のテストに依存せず、独立して実行できるようにする
   - `beforeEach`/`afterEach` を使用してテスト環境をリセットする

2. **テストの可読性**
   - テスト名は「何をテストするか」が明確に分かるようにする
   - Given-When-Then パターンでテストを構造化する

3. **モック使用のガイドライン**
   - 外部依存（API、データベース等）は適切にモック化する
   - `vi.mock()` を使用して依存モジュールをモック化する
   - `vi.fn()` でモック関数を作成する

4. **アサーション**
   - 期待する結果を明確に記述する
   - 複数のアサーションを使用する場合は、最も重要なものを先に書く

5. **エラーケースのテスト**
   - 正常系だけでなく、エラーケースもテストする
   - バリデーションエラー、ネットワークエラー等の異常系をカバーする 
